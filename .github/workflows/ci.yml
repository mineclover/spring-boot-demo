name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  quality-check:
    name: Code Quality Check
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        distribution: 'temurin'
        java-version: '17'
        cache: 'gradle'

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'

    - name: Grant execute permission for gradlew
      run: chmod +x gradlew

    - name: Install npm dependencies
      run: npm ci

    - name: Run ESLint
      run: npm run lint

    - name: Run Checkstyle
      run: ./gradlew checkstyleMain checkstyleTest

    - name: Run PMD
      run: ./gradlew pmdMain pmdTest

    - name: Run SpotBugs
      run: ./gradlew spotbugsMain

    - name: Run Tests
      run: ./gradlew test

    - name: Generate Test Report
      if: always()
      run: ./gradlew jacocoTestReport

    - name: Upload Test Results
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: test-results
        path: build/reports/tests/test/

    - name: Upload Code Quality Reports
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: quality-reports
        path: |
          build/reports/checkstyle/
          build/reports/pmd/
          build/reports/spotbugs/

  build:
    name: Build Application
    needs: quality-check
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        distribution: 'temurin'
        java-version: '17'
        cache: 'gradle'

    - name: Grant execute permission for gradlew
      run: chmod +x gradlew

    - name: Build with Gradle
      run: ./gradlew build -x test

    - name: Upload JAR
      uses: actions/upload-artifact@v4
      with:
        name: application-jar
        path: build/libs/*.jar

  docker-build:
    name: Build Docker Image
    needs: build
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Docker Hub (optional)
      if: github.event_name != 'pull_request'
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Build Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        push: false
        tags: spring-boot-demo:${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max